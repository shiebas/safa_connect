# Generated by Django 4.2.16 on 2025-06-09 19:28

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("geography", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("safa_id", models.CharField(blank=True, max_length=20, unique=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "season_year",
                    models.CharField(help_text="e.g., 2024/2025", max_length=9),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("main_sponsor", models.CharField(blank=True, max_length=200)),
                (
                    "sponsor_logo",
                    models.ImageField(blank=True, upload_to="competitions/sponsors/"),
                ),
                (
                    "has_groups",
                    models.BooleanField(
                        default=False,
                        help_text="Does this competition have groups/streams?",
                    ),
                ),
                (
                    "teams_per_group",
                    models.PositiveIntegerField(
                        default=18, help_text="Teams per group/stream"
                    ),
                ),
                ("points_win", models.PositiveIntegerField(default=3)),
                ("points_draw", models.PositiveIntegerField(default=1)),
                ("points_loss", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("registration_open", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-season_year", "region", "category"],
            },
        ),
        migrations.CreateModel(
            name="CompetitionCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("short_name", models.CharField(blank=True, max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("men", "Men"),
                            ("women", "Women"),
                            ("mixed", "Mixed"),
                        ],
                        default="men",
                        max_length=10,
                    ),
                ),
                (
                    "age_category",
                    models.CharField(
                        choices=[
                            ("senior", "Senior"),
                            ("u21", "Under 21"),
                            ("u19", "Under 19"),
                            ("u17", "Under 17"),
                        ],
                        default="senior",
                        max_length=10,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("national", "National"),
                            ("regional", "Regional"),
                            ("provincial", "Provincial"),
                            ("local", "Local"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["level", "gender", "name"],
            },
        ),
        migrations.CreateModel(
            name="CompetitionGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "group_type",
                    models.CharField(
                        choices=[
                            ("geographical", "Geographical"),
                            ("random", "Random Draw"),
                            ("seeded", "Seeded"),
                        ],
                        default="geographical",
                        max_length=20,
                    ),
                ),
                ("max_teams", models.PositiveIntegerField(default=18)),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groups",
                        to="league_management.competition",
                    ),
                ),
            ],
            options={
                "ordering": ["competition", "name"],
                "unique_together": {("competition", "name")},
            },
        ),
        migrations.CreateModel(
            name="CompetitionTeam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                ("registration_fee_paid", models.BooleanField(default=False)),
                ("played", models.PositiveIntegerField(default=0)),
                ("won", models.PositiveIntegerField(default=0)),
                ("drawn", models.PositiveIntegerField(default=0)),
                ("lost", models.PositiveIntegerField(default=0)),
                ("goals_for", models.PositiveIntegerField(default=0)),
                ("goals_against", models.PositiveIntegerField(default=0)),
                ("points", models.PositiveIntegerField(default=0)),
                ("yellow_cards", models.PositiveIntegerField(default=0)),
                ("red_cards", models.PositiveIntegerField(default=0)),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="league_management.competition",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="league_management.competitiongroup",
                    ),
                ),
            ],
            options={
                "ordering": ["-points", "-goals_for", "goals_against", "team__name"],
            },
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("round_number", models.PositiveIntegerField(default=1)),
                ("match_day", models.PositiveIntegerField(default=1)),
                ("match_date", models.DateField()),
                ("kickoff_time", models.TimeField()),
                ("venue", models.CharField(blank=True, max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("live", "Live"),
                            ("completed", "Completed"),
                            ("postponed", "Postponed"),
                            ("cancelled", "Cancelled"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("home_score", models.PositiveIntegerField(blank=True, null=True)),
                ("away_score", models.PositiveIntegerField(blank=True, null=True)),
                ("referee", models.CharField(blank=True, max_length=200)),
                ("assistant_ref_1", models.CharField(blank=True, max_length=200)),
                ("assistant_ref_2", models.CharField(blank=True, max_length=200)),
                ("fourth_official", models.CharField(blank=True, max_length=200)),
                ("attendance", models.PositiveIntegerField(blank=True, null=True)),
                ("weather_conditions", models.CharField(blank=True, max_length=100)),
                ("pitch_conditions", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "away_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="away_matches",
                        to="league_management.competitionteam",
                    ),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="league_management.competition",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="league_management.competitiongroup",
                    ),
                ),
                (
                    "home_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="home_matches",
                        to="league_management.competitionteam",
                    ),
                ),
            ],
            options={
                "ordering": ["match_date", "kickoff_time"],
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("safa_id", models.CharField(blank=True, max_length=20, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("short_name", models.CharField(blank=True, max_length=20)),
                ("nickname", models.CharField(blank=True, max_length=100)),
                ("home_ground", models.CharField(blank=True, max_length=200)),
                ("manager_name", models.CharField(blank=True, max_length=200)),
                ("coach_name", models.CharField(blank=True, max_length=200)),
                ("contact_person", models.CharField(blank=True, max_length=200)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("primary_color", models.CharField(default="Blue", max_length=50)),
                ("secondary_color", models.CharField(default="White", max_length=50)),
                ("team_logo", models.ImageField(blank=True, upload_to="teams/logos/")),
                ("is_active", models.BooleanField(default=True)),
                ("founded_year", models.PositiveIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lfa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="league_teams",
                        to="geography.localfootballassociation",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MatchEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("goal", "Goal"),
                            ("own_goal", "Own Goal"),
                            ("penalty_goal", "Penalty Goal"),
                            ("yellow_card", "Yellow Card"),
                            ("red_card", "Red Card"),
                            ("substitution", "Substitution"),
                            ("penalty_miss", "Penalty Miss"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "minute",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ]
                    ),
                ),
                ("player_name", models.CharField(max_length=200)),
                (
                    "substitute_in",
                    models.CharField(
                        blank=True, help_text="Player coming on", max_length=200
                    ),
                ),
                (
                    "substitute_out",
                    models.CharField(
                        blank=True, help_text="Player going off", max_length=200
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="league_management.match",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="league_management.competitionteam",
                    ),
                ),
            ],
            options={
                "ordering": ["minute", "created_at"],
            },
        ),
        migrations.AddField(
            model_name="competitionteam",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="league_management.team"
            ),
        ),
        migrations.AddField(
            model_name="competition",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="league_management.competitioncategory",
            ),
        ),
        migrations.AddField(
            model_name="competition",
            name="region",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="league_competitions",
                to="geography.region",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="competitionteam",
            unique_together={("competition", "team")},
        ),
    ]
