# Generated by Django 5.2.4 on 2025-09-03 01:08

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SAFACoinCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('competition_type', models.CharField(choices=[('FANTASY_FOOTBALL', 'Fantasy Football'), ('PREDICTION_GAME', 'Prediction Game'), ('SKILL_CHALLENGE', 'Skill Challenge'), ('TRIVIA', 'Football Trivia'), ('TOURNAMENT', 'Tournament')], max_length=20)),
                ('entry_fee', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(0)])),
                ('prize_pool', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(0)])),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('current_participants', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('rules', models.JSONField(blank=True, default=dict)),
                ('prize_distribution', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_competitions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SAFA Coin Competition',
                'verbose_name_plural': 'SAFA Coin Competitions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SAFACoinLoyaltyConversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loyalty_points', models.PositiveIntegerField()),
                ('coins_awarded', models.DecimalField(decimal_places=8, max_digits=20)),
                ('conversion_rate', models.DecimalField(decimal_places=4, max_digits=10)),
                ('converted_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_conversions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SAFA Coin Loyalty Conversion',
                'verbose_name_plural': 'SAFA Coin Loyalty Conversions',
                'ordering': ['-converted_at'],
            },
        ),
        migrations.CreateModel(
            name='SAFACoinReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_type', models.CharField(choices=[('DAILY_LOGIN', 'Daily Login'), ('MATCH_PARTICIPATION', 'Match Participation'), ('LOYALTY_CONVERSION', 'Loyalty Points Conversion'), ('REFERRAL', 'Referral Bonus'), ('ACHIEVEMENT', 'Achievement Unlocked'), ('SOCIAL_ENGAGEMENT', 'Social Engagement'), ('GAMING_PARTICIPATION', 'Gaming Participation'), ('SEASON_COMPLETION', 'Season Completion'), ('TOURNAMENT_WIN', 'Tournament Win'), ('SPECIAL_EVENT', 'Special Event')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('1E-8'))])),
                ('reason', models.CharField(max_length=200)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('claimed', models.BooleanField(default=False)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coin_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SAFA Coin Reward',
                'verbose_name_plural': 'SAFA Coin Rewards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SAFACoinWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=8, default=0, max_digits=20, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_earned', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('total_spent', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coin_wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SAFA Coin Wallet',
                'verbose_name_plural': 'SAFA Coin Wallets',
            },
        ),
        migrations.CreateModel(
            name='SAFACoinTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('1E-8'))])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('message', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('from_wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transfers', to='digital_coins.safacoinwallet')),
                ('to_wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transfers', to='digital_coins.safacoinwallet')),
            ],
            options={
                'verbose_name': 'SAFA Coin Transfer',
                'verbose_name_plural': 'SAFA Coin Transfers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SAFACoinTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('EARNED', 'Earned'), ('SPENT', 'Spent'), ('TRANSFER_SENT', 'Transfer Sent'), ('TRANSFER_RECEIVED', 'Transfer Received'), ('REFUND', 'Refund'), ('BONUS', 'Bonus'), ('LOYALTY_CONVERSION', 'Loyalty Conversion'), ('GAMING_REWARD', 'Gaming Reward'), ('GAMING_ENTRY', 'Gaming Entry Fee')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=20)),
                ('reason', models.CharField(max_length=200)),
                ('balance_after', models.DecimalField(decimal_places=8, max_digits=20)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_coin_transactions', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='digital_coins.safacoinwallet')),
            ],
            options={
                'verbose_name': 'SAFA Coin Transaction',
                'verbose_name_plural': 'SAFA Coin Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SAFACoinCompetitionParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_fee_paid', models.DecimalField(decimal_places=8, max_digits=20)),
                ('score', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('prizes_won', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='digital_coins.safacoincompetition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competition_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SAFA Coin Competition Participation',
                'verbose_name_plural': 'SAFA Coin Competition Participations',
                'ordering': ['-score', 'joined_at'],
                'unique_together': {('competition', 'user')},
            },
        ),
    ]
