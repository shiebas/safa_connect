# Generated by Django 5.2 on 2025-06-01 02:19

import django.db.models.deletion
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("geography", "0012_add_fields_to_club"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CompetitionCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("X", "Mixed")],
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "min_age",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Minimum Age"
                    ),
                ),
                (
                    "max_age",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Maximum Age"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Competition Category",
                "verbose_name_plural": "Competition Categories",
            },
        ),
        migrations.CreateModel(
            name="CompetitionLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "level_order",
                    models.PositiveIntegerField(
                        help_text="Lower numbers represent higher levels",
                        verbose_name="Level Order",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Competition Level",
                "verbose_name_plural": "Competition Levels",
                "ordering": ["level_order"],
            },
        ),
        migrations.CreateModel(
            name="CompetitionType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("LEAGUE", "League"),
                            ("KNOCKOUT", "Knockout"),
                            ("GROUP", "Group Stage"),
                            ("HYBRID", "Hybrid"),
                        ],
                        max_length=20,
                        verbose_name="Format",
                    ),
                ),
            ],
            options={
                "verbose_name": "Competition Type",
                "verbose_name_plural": "Competition Types",
            },
        ),
        migrations.CreateModel(
            name="Competition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "short_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Short Name"
                    ),
                ),
                (
                    "managed_by",
                    models.CharField(
                        choices=[
                            ("NF", "National Federation"),
                            ("ASSOC", "Association"),
                            ("LFA", "Local Football Association"),
                            ("OTHER", "Other Organization"),
                        ],
                        default="OTHER",
                        max_length=20,
                        verbose_name="Managed By",
                    ),
                ),
                (
                    "points_win",
                    models.PositiveIntegerField(
                        default=3, verbose_name="Points for Win"
                    ),
                ),
                (
                    "points_draw",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Points for Draw"
                    ),
                ),
                (
                    "points_loss",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Points for Loss"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("website", models.URLField(blank=True, verbose_name="Website")),
                (
                    "association",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.association",
                    ),
                ),
                (
                    "local_football_association",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.localfootballassociation",
                    ),
                ),
                (
                    "national_federation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.nationalfederation",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="competitions.competitioncategory",
                    ),
                ),
                (
                    "competition_level",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="competitions.competitionlevel",
                    ),
                ),
                (
                    "competition_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="competitions.competitiontype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Competition",
                "verbose_name_plural": "Competitions",
            },
        ),
        migrations.CreateModel(
            name="MatchOfficial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "qualification_level",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Qualification"
                    ),
                ),
                (
                    "official_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Official Number"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "local_football_association",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.localfootballassociation",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Match Official",
                "verbose_name_plural": "Match Officials",
            },
        ),
        migrations.CreateModel(
            name="Fixture",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Scheduled Date"
                    ),
                ),
                (
                    "scheduled_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Scheduled Time"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("POSTPONED", "Postponed"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "round_name",
                    models.CharField(
                        blank=True,
                        help_text='e.g., "Round 1", "Quarter Final"',
                        max_length=50,
                        verbose_name="Round",
                    ),
                ),
                (
                    "leg",
                    models.PositiveIntegerField(
                        default=1, help_text="For two-legged ties", verbose_name="Leg"
                    ),
                ),
                (
                    "assistant_referee1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fixtures_as_ar1",
                        to="competitions.matchofficial",
                    ),
                ),
                (
                    "assistant_referee2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fixtures_as_ar2",
                        to="competitions.matchofficial",
                    ),
                ),
                (
                    "fourth_official",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fixtures_as_fourth",
                        to="competitions.matchofficial",
                    ),
                ),
                (
                    "referee",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fixtures_as_referee",
                        to="competitions.matchofficial",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fixture",
                "verbose_name_plural": "Fixtures",
                "ordering": ["scheduled_date", "scheduled_time"],
            },
        ),
        migrations.CreateModel(
            name="MatchResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "home_score",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Home Score"
                    ),
                ),
                (
                    "away_score",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Away Score"
                    ),
                ),
                (
                    "home_score_ht",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Home Score HT"
                    ),
                ),
                (
                    "away_score_ht",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Away Score HT"
                    ),
                ),
                (
                    "home_penalties",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Home Penalties"
                    ),
                ),
                (
                    "away_penalties",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Away Penalties"
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HOME_WIN", "Home Win"),
                            ("AWAY_WIN", "Away Win"),
                            ("DRAW", "Draw"),
                            ("HOME_FORFEIT", "Home Team Forfeit"),
                            ("AWAY_FORFEIT", "Away Team Forfeit"),
                            ("ABANDONED", "Match Abandoned"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Outcome",
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(default=False, verbose_name="Verified"),
                ),
                (
                    "verified_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Verification Date"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Match Notes")),
                (
                    "fixture",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="competitions.fixture",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_results",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Match Result",
                "verbose_name_plural": "Match Results",
            },
        ),
        migrations.CreateModel(
            name="Season",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "start_date",
                    models.DateField(blank=True, null=True, verbose_name="Start Date"),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="End Date"),
                ),
                (
                    "registration_open",
                    models.DateField(
                        blank=True, null=True, verbose_name="Registration Opens"
                    ),
                ),
                (
                    "registration_close",
                    models.DateField(
                        blank=True, null=True, verbose_name="Registration Closes"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Active Season"),
                ),
                (
                    "competition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seasons",
                        to="competitions.competition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Season",
                "verbose_name_plural": "Seasons",
                "ordering": ["-start_date"],
            },
        ),
        migrations.AddField(
            model_name="fixture",
            name="season",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fixtures",
                to="competitions.season",
            ),
        ),
        migrations.CreateModel(
            name="TeamRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "team_name",
                    models.CharField(
                        help_text="Can differ from club name for multiple teams",
                        max_length=100,
                        verbose_name="Team Name",
                    ),
                ),
                (
                    "registration_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Registration Date"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("WITHDRAWN", "Withdrawn"),
                        ],
                        default="APPROVED",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="geography.club"
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_registrations",
                        to="competitions.season",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Registration",
                "verbose_name_plural": "Team Registrations",
                "unique_together": {("season", "club", "team_name")},
            },
        ),
        migrations.AddField(
            model_name="fixture",
            name="away_team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="away_fixtures",
                to="competitions.teamregistration",
            ),
        ),
        migrations.AddField(
            model_name="fixture",
            name="home_team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="home_fixtures",
                to="competitions.teamregistration",
            ),
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("address", models.TextField(blank=True, verbose_name="Address")),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Capacity"
                    ),
                ),
                (
                    "surface_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Surface Type"
                    ),
                ),
                (
                    "location_coordinates",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="GPS Coordinates"
                    ),
                ),
                (
                    "local_football_association",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.localfootballassociation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Venue",
                "verbose_name_plural": "Venues",
            },
        ),
        migrations.AddField(
            model_name="fixture",
            name="venue",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="competitions.venue",
            ),
        ),
        migrations.CreateModel(
            name="Standing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "played",
                    models.PositiveIntegerField(default=0, verbose_name="Played"),
                ),
                ("won", models.PositiveIntegerField(default=0, verbose_name="Won")),
                ("drawn", models.PositiveIntegerField(default=0, verbose_name="Drawn")),
                ("lost", models.PositiveIntegerField(default=0, verbose_name="Lost")),
                (
                    "goals_for",
                    models.PositiveIntegerField(default=0, verbose_name="Goals For"),
                ),
                (
                    "goals_against",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Goals Against"
                    ),
                ),
                (
                    "points",
                    models.PositiveIntegerField(default=0, verbose_name="Points"),
                ),
                (
                    "goal_difference",
                    models.IntegerField(default=0, verbose_name="Goal Difference"),
                ),
                (
                    "fair_play_points",
                    models.IntegerField(default=0, verbose_name="Fair Play Points"),
                ),
                (
                    "points_deducted",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Points Deducted"
                    ),
                ),
                (
                    "deduction_reason",
                    models.TextField(blank=True, verbose_name="Deduction Reason"),
                ),
                (
                    "position",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Position"
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standings",
                        to="competitions.season",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="competitions.teamregistration",
                    ),
                ),
            ],
            options={
                "verbose_name": "Standing",
                "verbose_name_plural": "Standings",
                "ordering": [
                    "-points",
                    "-goal_difference",
                    "-goals_for",
                    "team__team_name",
                ],
                "unique_together": {("season", "team")},
            },
        ),
    ]
