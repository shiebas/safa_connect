# Generated by Django 4.2.23 on 2025-07-23 21:15

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0020_alter_customuser_role'),
        ('geography', '0004_club_affiliation_fees_paid'),
        ('membership', '0041_remove_officialcertification_official'),
    ]

    operations = [
        migrations.CreateModel(
            name='Official',
            fields=[
                ('member_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='membership.member')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the official has been approved by an admin', verbose_name='Approved')),
                ('certification_number', models.CharField(blank=True, help_text='Certification or license number if applicable', max_length=50, null=True, verbose_name='Certification Number')),
                ('certification_document', models.FileField(blank=True, help_text='Upload proof of certification or qualification', null=True, upload_to='certification_documents/', verbose_name='Certification Document')),
                ('certification_expiry_date', models.DateField(blank=True, help_text='Expiry date of the certification or license', null=True, verbose_name='Certification Expiry Date')),
                ('referee_level', models.CharField(blank=True, choices=[('LOCAL', 'Local'), ('REGIONAL', 'Regional'), ('PROVINCIAL', 'Provincial'), ('NATIONAL', 'National'), ('INTERNATIONAL', 'International')], help_text='Level of referee qualification if applicable', max_length=20, null=True, verbose_name='Referee Level')),
                ('associations', models.ManyToManyField(blank=True, help_text='Referee or coaching associations this official belongs to', related_name='member_officials_registration', to='geography.association')),
                ('position', models.ForeignKey(help_text="Official's position or role in the club/association", on_delete=django.db.models.deletion.PROTECT, related_name='registration_officials', to='accounts.position')),
                ('primary_association', models.ForeignKey(blank=True, help_text='Primary association this official belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_primary_officials', to='geography.association')),
            ],
            options={
                'verbose_name': 'Official',
                'verbose_name_plural': 'Officials',
                'default_related_name': 'registration_officials',
            },
            bases=('membership.member',),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('member_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='membership.member')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the player has been approved by an admin', verbose_name='Approved')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'default_related_name': 'registration_players',
            },
            bases=('membership.member',),
        ),
        migrations.CreateModel(
            name='PlayerClubRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('registration_date', models.DateField(default=django.utils.timezone.now, verbose_name='Registration Date')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('TRANSFERRED', 'Transferred')], default='PENDING', max_length=20, verbose_name='Status')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Registration Expiry')),
                ('position', models.CharField(blank=True, choices=[('GK', 'Goalkeeper'), ('DF', 'Defender'), ('MF', 'Midfielder'), ('FW', 'Forward')], max_length=2, verbose_name='Position')),
                ('jersey_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Jersey Number')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Height (cm)')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Weight (kg)')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_player_registrations', to='geography.club')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_registrations', to='registration.player')),
            ],
            options={
                'verbose_name': 'Player Club Registration',
                'verbose_name_plural': 'Player Club Registrations',
                'ordering': ['-registration_date'],
            },
        ),
        migrations.CreateModel(
            name='OfficialCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('certification_type', models.CharField(choices=[('REFEREE', 'Referee Certification'), ('COACH', 'Coaching Certification'), ('ADMIN', 'Administrative Certification'), ('OTHER', 'Other Certification')], help_text='Type of certification', max_length=20, verbose_name='Certification Type')),
                ('level', models.CharField(choices=[('LOCAL', 'Local'), ('REGIONAL', 'Regional'), ('PROVINCIAL', 'Provincial'), ('NATIONAL', 'National'), ('INTERNATIONAL', 'International')], help_text='Level or grade of the certification', max_length=20, verbose_name='Level')),
                ('name', models.CharField(help_text='Name of the specific certification or qualification', max_length=100, verbose_name='Certification Name')),
                ('issuing_body', models.CharField(help_text='Organization that issued this certification', max_length=100, verbose_name='Issuing Organization')),
                ('certification_number', models.CharField(blank=True, help_text='Unique identifier for this certification', max_length=50, null=True, verbose_name='Certification Number')),
                ('obtained_date', models.DateField(help_text='When the certification was first obtained', verbose_name='Date Obtained')),
                ('expiry_date', models.DateField(blank=True, help_text='When the certification expires (if applicable)', null=True, verbose_name='Expiry Date')),
                ('document', models.FileField(blank=True, help_text='Upload proof of certification', null=True, upload_to='certification_documents/history/', verbose_name='Certificate Document')),
                ('notes', models.TextField(blank=True, help_text='Additional information about this certification', verbose_name='Notes')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this certification has been verified by an administrator', verbose_name='Verified')),
                ('official', models.ForeignKey(help_text='The official who holds this certification', on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='registration.official')),
            ],
            options={
                'verbose_name': 'Official Certification',
                'verbose_name_plural': 'Official Certifications',
                'ordering': ['-obtained_date'],
            },
        ),
        migrations.AddConstraint(
            model_name='playerclubregistration',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'INACTIVE')), fields=('player', 'club'), name='unique_active_registration_registration'),
        ),
    ]
