# Generated by Django 5.2.5 on 2025-09-04 13:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tournament_verification', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SportCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('SOCCER', 'Soccer/Football'), ('RUGBY', 'Rugby'), ('BASKETBALL', 'Basketball'), ('TENNIS', 'Tennis'), ('CRICKET', 'Cricket'), ('ATHLETICS', 'Athletics'), ('SWIMMING', 'Swimming'), ('OTHER', 'Other')], max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('players_per_team', models.PositiveIntegerField(default=11, help_text='Default players per team')),
                ('match_duration_minutes', models.PositiveIntegerField(default=90, help_text='Default match duration in minutes')),
                ('has_extra_time', models.BooleanField(default=False)),
                ('has_penalties', models.BooleanField(default=False)),
                ('points_for_win', models.PositiveIntegerField(default=3)),
                ('points_for_draw', models.PositiveIntegerField(default=1)),
                ('points_for_loss', models.PositiveIntegerField(default=0)),
                ('field_length_min', models.PositiveIntegerField(default=90, help_text='Minimum field length in meters')),
                ('field_length_max', models.PositiveIntegerField(default=120, help_text='Maximum field length in meters')),
                ('field_width_min', models.PositiveIntegerField(default=45, help_text='Minimum field width in meters')),
                ('field_width_max', models.PositiveIntegerField(default=90, help_text='Maximum field width in meters')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Sport Code',
                'verbose_name_plural': 'Sport Codes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TournamentCompetition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('tournament_type', models.CharField(choices=[('KNOCKOUT', 'Knockout Tournament'), ('ROUND_ROBIN', 'Round Robin'), ('POOL_PLAYOFF', 'Pool Play + Playoffs'), ('LEAGUE', 'League Format')], default='POOL_PLAYOFF', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('venue_address', models.TextField(blank=True)),
                ('max_teams', models.PositiveIntegerField(default=16)),
                ('max_players_per_team', models.PositiveIntegerField(default=15)),
                ('min_players_per_team', models.PositiveIntegerField(default=7)),
                ('pool_size', models.PositiveIntegerField(default=4, help_text='Teams per pool')),
                ('teams_advance_from_pool', models.PositiveIntegerField(default=2, help_text='Teams that advance from each pool')),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_registration_open', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_tournaments', to=settings.AUTH_USER_MODEL)),
                ('sport_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments', to='tournament_verification.sportcode')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('id_number', models.CharField(help_text='ID Number or Passport', max_length=20)),
                ('id_document_type', models.CharField(choices=[('ID', 'National ID'), ('PASSPORT', 'Passport'), ('DRIVER_LICENSE', 'Driver License'), ('OTHER', 'Other')], default='ID', max_length=20)),
                ('emergency_contact_name', models.CharField(max_length=200)),
                ('emergency_contact_phone', models.CharField(max_length=20)),
                ('emergency_contact_relationship', models.CharField(max_length=50)),
                ('medical_conditions', models.TextField(blank=True, help_text='Any medical conditions or allergies')),
                ('medical_aid_number', models.CharField(blank=True, max_length=50)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='tournament_players/')),
                ('registration_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Registration fee (R0.00 for tournament players)', max_digits=10)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('safa_user', models.ForeignKey(blank=True, help_text='Optional link to existing SAFA user', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Player',
                'verbose_name_plural': 'Tournament Players',
                'ordering': ['last_name', 'first_name'],
                'unique_together': {('id_number', 'email')},
            },
        ),
        migrations.CreateModel(
            name='TournamentTeam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(help_text='Team abbreviation', max_length=10)),
                ('team_color_primary', models.CharField(default='#000000', help_text='Primary team color (hex)', max_length=7)),
                ('team_color_secondary', models.CharField(default='#FFFFFF', help_text='Secondary team color (hex)', max_length=7)),
                ('captain_name', models.CharField(max_length=200)),
                ('captain_phone', models.CharField(max_length=20)),
                ('captain_email', models.EmailField(max_length=254)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('pool', models.CharField(blank=True, help_text='Pool assignment (A, B, C, etc.)', max_length=10)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='tournament_verification.tournamentcompetition')),
            ],
            options={
                'verbose_name': 'Tournament Team',
                'verbose_name_plural': 'Tournament Teams',
                'ordering': ['name'],
                'unique_together': {('tournament', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TournamentMatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('match_date', models.DateTimeField()),
                ('venue', models.CharField(blank=True, max_length=200)),
                ('referee', models.CharField(blank=True, max_length=200)),
                ('pool', models.CharField(blank=True, help_text='Pool for pool matches', max_length=10)),
                ('round_name', models.CharField(blank=True, help_text="Round name (e.g., 'Pool Play', 'Quarter Final')", max_length=50)),
                ('match_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('POSTPONED', 'Postponed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20)),
                ('home_score', models.PositiveIntegerField(default=0)),
                ('away_score', models.PositiveIntegerField(default=0)),
                ('home_score_extra_time', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_score_extra_time', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('home_penalties', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_penalties', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('home_tries', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_tries', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('home_conversions', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_conversions', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('home_penalties_rugby', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_penalties_rugby', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('home_drop_goals', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('away_drop_goals', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournament_verification.tournamentcompetition')),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='tournament_verification.tournamentteam')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='tournament_verification.tournamentteam')),
            ],
            options={
                'verbose_name': 'Tournament Match',
                'verbose_name_plural': 'Tournament Matches',
                'ordering': ['match_date', 'match_number'],
            },
        ),
        migrations.CreateModel(
            name='TournamentStandings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pool', models.CharField(blank=True, max_length=10)),
                ('matches_played', models.PositiveIntegerField(default=0)),
                ('matches_won', models.PositiveIntegerField(default=0)),
                ('matches_drawn', models.PositiveIntegerField(default=0)),
                ('matches_lost', models.PositiveIntegerField(default=0)),
                ('goals_for', models.PositiveIntegerField(default=0)),
                ('goals_against', models.PositiveIntegerField(default=0)),
                ('goal_difference', models.IntegerField(default=0)),
                ('points', models.PositiveIntegerField(default=0)),
                ('position', models.PositiveIntegerField(default=1)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='tournament_verification.tournamentcompetition')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='tournament_verification.tournamentteam')),
            ],
            options={
                'verbose_name': 'Tournament Standing',
                'verbose_name_plural': 'Tournament Standings',
                'ordering': ['pool', 'position', '-points', '-goal_difference'],
                'unique_together': {('tournament', 'team')},
            },
        ),
        migrations.CreateModel(
            name='TournamentPool',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Pool name (A, B, C, etc.)', max_length=10)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pools', to='tournament_verification.tournamentcompetition')),
                ('teams', models.ManyToManyField(blank=True, related_name='pool_assignments', to='tournament_verification.tournamentteam')),
            ],
            options={
                'verbose_name': 'Tournament Pool',
                'verbose_name_plural': 'Tournament Pools',
                'ordering': ['name'],
                'unique_together': {('tournament', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TournamentTeamPlayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position', models.CharField(blank=True, help_text='Player position (e.g., Goalkeeper, Forward)', max_length=50)),
                ('jersey_number', models.PositiveIntegerField(blank=True, null=True)),
                ('is_captain', models.BooleanField(default=False)),
                ('is_vice_captain', models.BooleanField(default=False)),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_assignments', to='tournament_verification.tournamentplayer')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='tournament_verification.tournamentteam')),
            ],
            options={
                'verbose_name': 'Tournament Team Player',
                'verbose_name_plural': 'Tournament Team Players',
                'ordering': ['jersey_number', 'player__last_name'],
                'unique_together': {('team', 'jersey_number')},
            },
        ),
    ]
