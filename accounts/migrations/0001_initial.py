# Generated by Django 4.2.23 on 2025-07-29 20:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("geography", "__first__"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("logo", models.ImageField(blank=True, null=True, upload_to="logos/")),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN_NATIONAL", "National Federation Admin"),
                            (
                                "ADMIN_NATIONAL_ACCOUNTS",
                                "National Accounts Administrator",
                            ),
                            ("ADMIN_PROVINCE", "Provincial Administrator"),
                            ("ADMIN_REGION", "Regional Administrator"),
                            ("ADMIN_LOCAL_FED", "Local Federation Administrator"),
                            ("CLUB_ADMIN", "Club Administrator"),
                            ("ASSOCIATION_ADMIN", "Association Administrator"),
                        ],
                        default="ADMIN_PROVINCE",
                        max_length=30,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=50)),
                ("middle_name", models.CharField(blank=True, max_length=100)),
                ("surname", models.CharField(blank=True, max_length=100)),
                ("alias", models.CharField(blank=True, max_length=100)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=1,
                    ),
                ),
                (
                    "nationality",
                    models.CharField(
                        default="South African",
                        help_text="User's nationality",
                        max_length=50,
                    ),
                ),
                (
                    "birth_country",
                    models.CharField(
                        default="ZAF",
                        help_text="3-letter country code for country of birth",
                        max_length=3,
                    ),
                ),
                (
                    "popi_act_consent",
                    models.BooleanField(
                        default=False,
                        help_text="User must consent to POPI Act terms for registration",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True,
                        default="ZAF",
                        help_text="Default is ZAF for South African citizens",
                        max_length=3,
                    ),
                ),
                (
                    "id_number",
                    models.CharField(
                        blank=True,
                        help_text="13-digit South African ID number for citizens",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "id_number_other",
                    models.CharField(blank=True, max_length=25, null=True),
                ),
                (
                    "passport_number",
                    models.CharField(blank=True, max_length=25, null=True),
                ),
                (
                    "id_document_type",
                    models.CharField(
                        choices=[
                            ("BC", "Birth Certificate"),
                            ("PP", "Passport"),
                            ("ID", "National ID"),
                            ("DL", "Driver License"),
                            ("OT", "Other"),
                        ],
                        default="ID",
                        max_length=2,
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                ("membership_card", models.BooleanField(default=False)),
                ("payment_required", models.BooleanField(default=True)),
                (
                    "safa_id",
                    models.CharField(blank=True, max_length=5, null=True, unique=True),
                ),
                (
                    "fifa_id",
                    models.CharField(blank=True, max_length=7, null=True, unique=True),
                ),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="images/profile_photos/"
                    ),
                ),
                (
                    "id_document",
                    models.FileField(
                        blank=True, null=True, upload_to="documents/user_documents/"
                    ),
                ),
                (
                    "registration_date",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "membership_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Payment"),
                            ("PAID", "Payment Received"),
                            ("ACTIVE", "Active Member"),
                            ("EXPIRED", "Membership Expired"),
                            ("SUSPENDED", "Membership Suspended"),
                        ],
                        default="PENDING",
                        help_text="Current membership status",
                        max_length=20,
                    ),
                ),
                (
                    "membership_paid_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when membership payment was received",
                        null=True,
                    ),
                ),
                (
                    "membership_activated_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when membership was activated by admin",
                        null=True,
                    ),
                ),
                (
                    "membership_expires_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when membership expires (annual renewal)",
                        null=True,
                    ),
                ),
                (
                    "membership_fee_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Amount paid for membership in ZAR (South African Rand)",
                        max_digits=10,
                        null=True,
                        verbose_name="Membership Fee (ZAR)",
                    ),
                ),
                (
                    "card_delivery_preference",
                    models.CharField(
                        choices=[
                            ("DIGITAL_ONLY", "Digital Card Only"),
                            ("PHYSICAL_ONLY", "Physical Card Only"),
                            ("BOTH", "Both Digital and Physical"),
                        ],
                        default="DIGITAL_ONLY",
                        help_text="Preferred card delivery method",
                        max_length=20,
                    ),
                ),
                (
                    "physical_card_requested",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user has requested a physical card",
                    ),
                ),
                (
                    "physical_card_delivery_address",
                    models.TextField(
                        blank=True,
                        help_text="Delivery address for physical card (if requested)",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=150, verbose_name="last name"),
                ),
                (
                    "employment_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EMPLOYEE", "Full-time Employee"),
                            ("MEMBER", "Member (Political Structure)"),
                            ("PUBLIC", "Public/Supporter"),
                        ],
                        help_text="Employment/membership status within SAFA structure",
                        max_length=20,
                    ),
                ),
                (
                    "club_membership_verified",
                    models.BooleanField(
                        default=False, help_text="Verified as bona fide club member"
                    ),
                ),
                (
                    "club_membership_number",
                    models.CharField(
                        blank=True,
                        help_text="Club membership number for verification",
                        max_length=50,
                    ),
                ),
                (
                    "driver_license_number",
                    models.CharField(
                        blank=True,
                        help_text="Driver's license number",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "association",
                    models.ForeignKey(
                        blank=True,
                        help_text="Association this user administers (required for association admins)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="admin_users",
                        to="geography.association",
                    ),
                ),
                (
                    "club",
                    models.ForeignKey(
                        blank=True,
                        help_text="Club this user belongs to (required for political leaders)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="members",
                        to="geography.club",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "local_federation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Local Football Association this user belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.localfootballassociation",
                    ),
                ),
                (
                    "mother_body",
                    models.ForeignKey(
                        blank=True,
                        help_text="The mother body this user belongs to (defaults to SAFAM)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="custom_users",
                        to="geography.motherbody",
                    ),
                ),
                (
                    "national_federation",
                    models.ForeignKey(
                        blank=True,
                        help_text="National federation this user belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="federation_users",
                        to="geography.nationalfederation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom User",
                "verbose_name_plural": "Custom Users",
                "db_table": "accounts_customuser",
                "ordering": ["email"],
            },
        ),
        migrations.CreateModel(
            name="OrganizationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("NATIONAL", "National Federation"),
                            ("PROVINCE", "Province"),
                            ("REGION", "Region"),
                            ("LFA", "Local Football Association"),
                            ("ASSOCIATION", "Association"),
                            ("CLUB", "Club"),
                        ],
                        max_length=20,
                    ),
                ),
                ("requires_approval", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="RegistrationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("allowed_user_roles", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "levels",
                    models.CharField(
                        default="NATIONAL,PROVINCE,REGION,LFA,CLUB",
                        help_text="Comma-separated list of levels where this position can be used",
                        max_length=100,
                    ),
                ),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("EMPLOYEE", "Full-time Employee"),
                            ("MEMBER", "Member (Political Structure)"),
                            ("PUBLIC", "Public/Supporter"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=True, help_text="New positions need admin approval"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_positions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="LFAAdministrator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lfa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geography.localfootballassociation",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentAccessLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("player_id", "Player ID Document"),
                            ("player_passport", "Player Passport"),
                            ("player_sa_passport", "Player SA Passport"),
                            ("player_profile", "Player Profile Picture"),
                            ("official_id", "Official ID Document"),
                            ("official_passport", "Official Passport"),
                            ("official_cert", "Official Certification"),
                            ("club_document", "Club Document"),
                            ("other", "Other Document"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "document_name",
                    models.CharField(
                        help_text="Original document filename", max_length=255
                    ),
                ),
                (
                    "document_owner",
                    models.CharField(
                        help_text="Person/entity the document belongs to",
                        max_length=255,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("view", "Viewed"),
                            ("download", "Downloaded"),
                            ("print", "Printed"),
                        ],
                        default="view",
                        max_length=10,
                    ),
                ),
                (
                    "access_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "watermarked",
                    models.BooleanField(
                        default=False, help_text="Whether document was watermarked"
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether access was successful"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the access"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who accessed the document",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Document Access Log",
                "verbose_name_plural": "Document Access Logs",
                "db_table": "document_access_log",
                "ordering": ["-access_time"],
            },
        ),
        migrations.AddField(
            model_name="customuser",
            name="organization_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Primary organization type this user belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="accounts.organizationtype",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="positions",
            field=models.ManyToManyField(
                blank=True,
                help_text="User's positions within SAFA structure",
                to="accounts.position",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="province",
            field=models.ForeignKey(
                blank=True,
                help_text="Province this user belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geography.province",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="region",
            field=models.ForeignKey(
                blank=True,
                help_text="Region this user belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geography.region",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="registration_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="accounts.registrationtype",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="supporting_club",
            field=models.ForeignKey(
                blank=True,
                help_text="Club that this supporter follows",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="supporters",
                to="geography.club",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="customuser",
            constraint=models.UniqueConstraint(
                condition=models.Q(("id_number__isnull", False)),
                fields=("id_number",),
                name="unique_id_number",
            ),
        ),
        migrations.AddConstraint(
            model_name="customuser",
            constraint=models.UniqueConstraint(
                condition=models.Q(("passport_number__isnull", False)),
                fields=("passport_number",),
                name="unique_passport_number",
            ),
        ),
        migrations.AddConstraint(
            model_name="customuser",
            constraint=models.UniqueConstraint(
                condition=models.Q(("mother_body__isnull", False)),
                fields=("mother_body",),
                name="unique_mother_body_when_not_blank",
            ),
        ),
    ]
