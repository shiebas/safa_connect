# Generated by Django 4.2.23 on 2025-07-29 20:13

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import membership.models
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("accounts", "0001_initial"),
        ("geography", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "invoice_number",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        unique=True,
                        verbose_name="Invoice Number",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING", "Pending Payment"),
                            ("PAID", "Fully Paid"),
                            ("OVERDUE", "Overdue"),
                            ("CANCELLED", "Cancelled"),
                            ("PARTIALLY_PAID", "Partially Paid"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "invoice_type",
                    models.CharField(
                        choices=[
                            ("ORGANIZATION_MEMBERSHIP", "Organization Membership Fee"),
                            ("MEMBER_REGISTRATION", "Member Registration Fee"),
                            ("ANNUAL_FEE", "Annual Membership Fee"),
                            ("RENEWAL", "Season Renewal"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                        verbose_name="Invoice Type",
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Subtotal (Excl. VAT)",
                    ),
                ),
                (
                    "vat_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.1500"),
                        max_digits=5,
                        verbose_name="VAT Rate",
                    ),
                ),
                (
                    "vat_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="VAT Amount",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Total Amount (Incl. VAT)",
                    ),
                ),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Amount Paid",
                    ),
                ),
                (
                    "outstanding_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Outstanding Amount",
                    ),
                ),
                (
                    "is_payment_plan",
                    models.BooleanField(
                        default=False,
                        help_text="Allow payment in installments",
                        verbose_name="Payment Plan",
                    ),
                ),
                (
                    "installments",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Number of Installments"
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Issue Date"
                    ),
                ),
                (
                    "due_date",
                    models.DateField(blank=True, null=True, verbose_name="Due Date"),
                ),
                (
                    "payment_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Payment Date"
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Payment Method"
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Payment Reference"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_invoices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice",
                "verbose_name_plural": "Invoices",
                "ordering": ["-issue_date", "-created"],
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "safa_id",
                    models.CharField(
                        help_text="5-digit unique SAFA identification number",
                        max_length=5,
                        null=True,
                        unique=True,
                        verbose_name="SAFA ID",
                    ),
                ),
                (
                    "is_existing_member",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this member already had a SAFA ID from previous registration",
                        verbose_name="Existing SAFA Member",
                    ),
                ),
                (
                    "previous_safa_id",
                    models.CharField(
                        blank=True,
                        help_text="Previous SAFA ID if this is a transfer/renewal",
                        max_length=5,
                        null=True,
                        verbose_name="Previous SAFA ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=100, verbose_name="First Name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=100, verbose_name="Last Name"),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Email Address"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid phone number",
                                regex="^\\+?[\\d\\s\\-\\(\\)]{10,20}$",
                            )
                        ],
                        verbose_name="Phone Number",
                    ),
                ),
                ("date_of_birth", models.DateField(verbose_name="Date of Birth")),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=1,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "id_number",
                    models.CharField(
                        blank=True,
                        max_length=13,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="ID number must be exactly 13 digits",
                                regex="^\\d{13}$",
                            )
                        ],
                        verbose_name="ID Number",
                    ),
                ),
                (
                    "passport_number",
                    models.CharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name="Passport Number",
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Street Address"
                    ),
                ),
                (
                    "suburb",
                    models.CharField(blank=True, max_length=100, verbose_name="Suburb"),
                ),
                (
                    "city",
                    models.CharField(blank=True, max_length=100, verbose_name="City"),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="State/Province"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Postal Code"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Country"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("PLAYER", "Player"),
                            ("OFFICIAL", "Official"),
                            ("ADMIN", "Administrator"),
                        ],
                        default="PLAYER",
                        max_length=20,
                        verbose_name="Member Role",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending SAFA Approval"),
                            ("ACTIVE", "SAFA Approved - Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("REJECTED", "Rejected by SAFA"),
                            ("TRANSFERRED", "Transferred from another club"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="SAFA Status",
                    ),
                ),
                (
                    "nationality",
                    models.CharField(
                        blank=True,
                        default="South African",
                        max_length=100,
                        verbose_name="Nationality",
                    ),
                ),
                (
                    "registration_complete",
                    models.BooleanField(
                        default=False,
                        help_text="All required documents and information provided",
                        verbose_name="Registration Complete",
                    ),
                ),
                (
                    "registration_method",
                    models.CharField(
                        choices=[
                            ("SELF", "Self Registration Online"),
                            ("CLUB", "Club Registration"),
                            ("ADMIN", "Admin Registration"),
                        ],
                        default="SELF",
                        max_length=10,
                        verbose_name="Registration Method",
                    ),
                ),
                ("approved_date", models.DateTimeField(blank=True, null=True)),
                (
                    "rejection_reason",
                    models.TextField(blank=True, verbose_name="Rejection Reason"),
                ),
                (
                    "registration_address",
                    models.CharField(
                        blank=True,
                        help_text="Address used to determine organization jurisdiction",
                        max_length=255,
                        verbose_name="Registration Address",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Install PostGIS for full geographic support",
                        max_length=100,
                        verbose_name="Location Placeholder",
                    ),
                ),
                (
                    "terms_accepted",
                    models.BooleanField(
                        default=False, verbose_name="Terms and Conditions Accepted"
                    ),
                ),
                (
                    "privacy_accepted",
                    models.BooleanField(
                        default=False, verbose_name="Privacy Policy Accepted"
                    ),
                ),
                (
                    "marketing_consent",
                    models.BooleanField(
                        default=False, verbose_name="Marketing Consent"
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="member_profiles/",
                        verbose_name="Profile Picture",
                    ),
                ),
                (
                    "id_document",
                    models.FileField(
                        blank=True, null=True, upload_to="documents/member_documents/"
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Emergency Contact"
                    ),
                ),
                (
                    "emergency_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        verbose_name="Emergency Contact Phone",
                    ),
                ),
                (
                    "medical_notes",
                    models.TextField(blank=True, verbose_name="Medical Notes"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_members",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "associations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Associations this member belongs to (referee, coaching, etc.)",
                        related_name="member_officials",
                        to="geography.association",
                    ),
                ),
                (
                    "current_club",
                    models.ForeignKey(
                        help_text="Current club this member belongs to (MANDATORY)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_members",
                        to="geography.club",
                    ),
                ),
            ],
            options={
                "verbose_name": "Member",
                "verbose_name_plural": "Members",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="SAFASeasonConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "season_year",
                    models.PositiveIntegerField(
                        help_text="The year this season configuration applies to (e.g., 2025)",
                        unique=True,
                        verbose_name="Season Year",
                    ),
                ),
                (
                    "season_start_date",
                    models.DateField(verbose_name="Season Start Date"),
                ),
                ("season_end_date", models.DateField(verbose_name="Season End Date")),
                (
                    "organization_registration_start",
                    models.DateField(
                        default=datetime.date(2020, 1, 1),
                        help_text="When organizations can start paying membership fees",
                        verbose_name="Organization Registration Start",
                    ),
                ),
                (
                    "organization_registration_end",
                    models.DateField(
                        default=datetime.date(2099, 12, 31),
                        help_text="Deadline for organization membership payments",
                        verbose_name="Organization Registration End",
                    ),
                ),
                (
                    "member_registration_start",
                    models.DateField(
                        default=datetime.date(2020, 1, 1),
                        help_text="When individual members can start registering",
                        verbose_name="Member Registration Start",
                    ),
                ),
                (
                    "member_registration_end",
                    models.DateField(
                        default=datetime.date(2099, 12, 31),
                        help_text="Deadline for individual member registrations",
                        verbose_name="Member Registration End",
                    ),
                ),
                (
                    "vat_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.1500"),
                        max_digits=5,
                        verbose_name="VAT Rate",
                    ),
                ),
                (
                    "payment_due_days",
                    models.PositiveIntegerField(
                        default=30, verbose_name="Payment Due Days"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=False, verbose_name="Active Season"),
                ),
                (
                    "is_renewal_season",
                    models.BooleanField(
                        default=False,
                        help_text="Generates invoices for all entities when activated",
                        verbose_name="Renewal Season",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_season_configs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "SAFA Season Configuration",
                "verbose_name_plural": "SAFA Season Configurations",
                "ordering": ["-season_year"],
            },
        ),
        migrations.CreateModel(
            name="SAFAFeeStructure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("ASSOCIATION", "Association"),
                            ("PROVINCE", "Province"),
                            ("REGION", "Region"),
                            ("LFA", "Local Football Association"),
                            ("CLUB", "Club"),
                            ("PLAYER_JUNIOR", "Junior Player (Under 18)"),
                            ("PLAYER_SENIOR", "Senior Player (18+)"),
                            ("OFFICIAL_REFEREE", "Referee Official"),
                            ("OFFICIAL_COACH", "Coach Official"),
                            ("OFFICIAL_GENERAL", "General Official"),
                            ("OFFICIAL_SECRETARY", "Secretary Official"),
                            ("OFFICIAL_TREASURER", "Treasurer Official"),
                            ("OFFICIAL_COMMITTEE", "Committee Member"),
                        ],
                        max_length=30,
                        verbose_name="Entity Type",
                    ),
                ),
                (
                    "annual_fee",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Annual Fee (Excl. VAT)",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Fee Description"),
                ),
                (
                    "is_pro_rata",
                    models.BooleanField(
                        default=True, verbose_name="Pro-rata Applicable"
                    ),
                ),
                (
                    "minimum_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Minimum Fee (Excl. VAT)",
                    ),
                ),
                (
                    "is_organization",
                    models.BooleanField(default=False, verbose_name="Is Organization"),
                ),
                (
                    "requires_organization_payment",
                    models.BooleanField(
                        default=True, verbose_name="Requires Organization Payment"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_fee_structures",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "season_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fee_structures",
                        to="membership.safaseasonconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "SAFA Fee Structure",
                "verbose_name_plural": "SAFA Fee Structures",
            },
        ),
        migrations.CreateModel(
            name="RegistrationWorkflow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "personal_info_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "club_selection_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "document_upload_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "club_approval_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "safa_approval_status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("BLOCKED", "Blocked"),
                        ],
                        default="NOT_STARTED",
                        max_length=20,
                    ),
                ),
                (
                    "current_step",
                    models.CharField(
                        choices=[
                            ("PERSONAL_INFO", "Personal Information"),
                            ("CLUB_SELECTION", "Club Selection"),
                            ("DOCUMENT_UPLOAD", "Document Upload"),
                            ("PAYMENT", "Payment Processing"),
                            ("CLUB_APPROVAL", "Club Approval"),
                            ("SAFA_APPROVAL", "SAFA Approval"),
                            ("COMPLETE", "Registration Complete"),
                        ],
                        default="PERSONAL_INFO",
                        max_length=20,
                        verbose_name="Current Step",
                    ),
                ),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(default=0, verbose_name="Completion %"),
                ),
                (
                    "member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workflow",
                        to="membership.member",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registration Workflow",
                "verbose_name_plural": "Registration Workflows",
            },
        ),
        migrations.CreateModel(
            name="OrganizationSeasonRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "registration_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Payment"),
                            ("PAID", "Paid - Active"),
                            ("OVERDUE", "Overdue"),
                            ("SUSPENDED", "Suspended"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "invoice",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organization_registration",
                        to="membership.invoice",
                    ),
                ),
                (
                    "registered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="registered_organizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "season_config",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_registrations",
                        to="membership.safaseasonconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization Season Registration",
                "verbose_name_plural": "Organization Season Registrations",
            },
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "membership_type",
                    models.CharField(default="STANDARD", max_length=20),
                ),
                (
                    "member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legacy_membership",
                        to="membership.member",
                    ),
                ),
            ],
            options={
                "verbose_name": "Legacy Membership",
                "verbose_name_plural": "Legacy Memberships",
            },
        ),
        migrations.CreateModel(
            name="MemberSeasonHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending SAFA Approval"),
                            ("ACTIVE", "SAFA Approved - Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("REJECTED", "Rejected by SAFA"),
                            ("TRANSFERRED", "Transferred from another club"),
                        ],
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("registration_date", models.DateTimeField()),
                (
                    "registration_method",
                    models.CharField(
                        choices=[
                            ("SELF", "Self Registration Online"),
                            ("CLUB", "Club Registration"),
                            ("ADMIN", "Admin Registration"),
                        ],
                        max_length=10,
                        verbose_name="Registration Method",
                    ),
                ),
                (
                    "invoice_paid",
                    models.BooleanField(default=False, verbose_name="Invoice Paid"),
                ),
                (
                    "safa_approved",
                    models.BooleanField(default=False, verbose_name="SAFA Approved"),
                ),
                ("safa_approved_date", models.DateTimeField(blank=True, null=True)),
                ("jersey_number", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "position",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Position"
                    ),
                ),
                ("transfer_date", models.DateTimeField(blank=True, null=True)),
                (
                    "associations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="historical_member_officials",
                        to="geography.association",
                    ),
                ),
                (
                    "club",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="historical_members",
                        to="geography.club",
                    ),
                ),
                (
                    "lfa",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.localfootballassociation",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="season_history",
                        to="membership.member",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.province",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geography.region",
                    ),
                ),
                (
                    "season_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="member_histories",
                        to="membership.safaseasonconfig",
                    ),
                ),
                (
                    "transferred_from_club",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transferred_from_members",
                        to="geography.club",
                    ),
                ),
            ],
            options={
                "verbose_name": "Member Season History",
                "verbose_name_plural": "Member Season Histories",
                "ordering": ["-season_config__season_year"],
            },
        ),
        migrations.CreateModel(
            name="MemberProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_position",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("GK", "Goalkeeper"),
                            ("DF", "Defender"),
                            ("MF", "Midfielder"),
                            ("FW", "Forward"),
                        ],
                        max_length=50,
                        verbose_name="Playing Position",
                    ),
                ),
                (
                    "certification_number",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Certification Number"
                    ),
                ),
                (
                    "certification_document",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="certification_documents/",
                        verbose_name="Certification Document",
                    ),
                ),
                (
                    "certification_expiry_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Certification Expiry Date"
                    ),
                ),
                (
                    "referee_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOCAL", "Local"),
                            ("REGIONAL", "Regional"),
                            ("PROVINCIAL", "Provincial"),
                            ("NATIONAL", "National"),
                            ("INTERNATIONAL", "International"),
                        ],
                        max_length=20,
                        verbose_name="Referee Level",
                    ),
                ),
                (
                    "guardian_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Guardian Name"
                    ),
                ),
                (
                    "guardian_email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Guardian Email"
                    ),
                ),
                (
                    "guardian_phone",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Guardian Phone"
                    ),
                ),
                (
                    "birth_certificate",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="documents/birth_certificates/",
                        verbose_name="Birth Certificate",
                    ),
                ),
                (
                    "member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to="membership.member",
                    ),
                ),
                (
                    "official_position",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="member_profiles",
                        to="accounts.position",
                    ),
                ),
            ],
            options={
                "verbose_name": "Member Profile",
                "verbose_name_plural": "Member Profiles",
            },
        ),
        migrations.CreateModel(
            name="MemberDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("ID_COPY", "ID Document Copy"),
                            ("BIRTH_CERT", "Birth Certificate"),
                            ("PASSPORT", "Passport Copy"),
                            ("MEDICAL_CERT", "Medical Certificate"),
                            ("CLEARANCE_CERT", "Clearance Certificate"),
                            ("PHOTO", "Passport Photo"),
                            ("PARENT_CONSENT", "Parental Consent (Under 18)"),
                            ("PROOF_RESIDENCE", "Proof of Residence"),
                            ("QUALIFICATION_CERT", "Qualification Certificate"),
                            ("OTHER", "Other Document"),
                        ],
                        max_length=20,
                        verbose_name="Document Type",
                    ),
                ),
                (
                    "document_file",
                    models.FileField(
                        upload_to="member_documents/%Y/%m/",
                        verbose_name="Document File",
                    ),
                ),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Verification"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected - Resubmission Required"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Verification Status",
                    ),
                ),
                ("verified_date", models.DateTimeField(blank=True, null=True)),
                (
                    "rejection_notes",
                    models.TextField(blank=True, verbose_name="Rejection Notes"),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="File Size (bytes)"
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="File Type"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False, verbose_name="Required Document"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Document Expiry"
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="membership.member",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Member Document",
                "verbose_name_plural": "Member Documents",
            },
        ),
        migrations.AddField(
            model_name="member",
            name="current_season",
            field=models.ForeignKey(
                default=membership.models.SAFASeasonConfig.get_active_season,
                help_text="Season this member is registered for",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="current_season_members",
                to="membership.safaseasonconfig",
            ),
        ),
        migrations.AddField(
            model_name="member",
            name="lfa",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geography.localfootballassociation",
            ),
        ),
        migrations.AddField(
            model_name="member",
            name="national_federation",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                to="geography.nationalfederation",
            ),
        ),
        migrations.AddField(
            model_name="member",
            name="province",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geography.province",
            ),
        ),
        migrations.AddField(
            model_name="member",
            name="region",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geography.region",
            ),
        ),
        migrations.AddField(
            model_name="member",
            name="user",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="member_profile",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="InvoiceItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=200, verbose_name="Description"),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(default=1, verbose_name="Quantity"),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Unit Price (Excl. VAT)",
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="membership.invoice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice Item",
                "verbose_name_plural": "Invoice Items",
            },
        ),
        migrations.AddField(
            model_name="invoice",
            name="member",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invoices",
                to="membership.member",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="season_config",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="invoices",
                to="membership.safaseasonconfig",
            ),
        ),
        migrations.CreateModel(
            name="ClubMemberQuota",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "max_senior_players",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Maximum senior players allowed",
                        verbose_name="Max Senior Players",
                    ),
                ),
                (
                    "max_junior_players",
                    models.PositiveIntegerField(
                        default=50,
                        help_text="Maximum junior players allowed",
                        verbose_name="Max Junior Players",
                    ),
                ),
                (
                    "max_officials",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Maximum officials allowed",
                        verbose_name="Max Officials",
                    ),
                ),
                ("current_senior_players", models.PositiveIntegerField(default=0)),
                ("current_junior_players", models.PositiveIntegerField(default=0)),
                ("current_officials", models.PositiveIntegerField(default=0)),
                (
                    "club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="member_quotas",
                        to="geography.club",
                    ),
                ),
                (
                    "season_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="club_quotas",
                        to="membership.safaseasonconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "Club Member Quota",
                "verbose_name_plural": "Club Member Quotas",
            },
        ),
        migrations.CreateModel(
            name="Transfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "request_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Request Date"
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Effective Date"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "reason",
                    models.TextField(blank=True, verbose_name="Transfer Reason"),
                ),
                (
                    "transfer_fee",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        verbose_name="Transfer Fee",
                    ),
                ),
                (
                    "approved_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Approval Date"
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(blank=True, verbose_name="Rejection Reason"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_transfers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "from_club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers_out",
                        to="geography.club",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers",
                        to="membership.member",
                    ),
                ),
                (
                    "to_club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers_in",
                        to="geography.club",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transfer",
                "verbose_name_plural": "Transfers",
                "ordering": ["-request_date"],
                "indexes": [
                    models.Index(
                        fields=["member", "status"],
                        name="membership__member__343b85_idx",
                    ),
                    models.Index(
                        fields=["from_club", "status"],
                        name="membership__from_cl_9473aa_idx",
                    ),
                    models.Index(
                        fields=["to_club", "status"],
                        name="membership__to_club_0cb77c_idx",
                    ),
                    models.Index(
                        fields=["request_date"], name="membership__request_1fbdd5_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="safaseasonconfig",
            index=models.Index(
                fields=["season_year"], name="membership__season__3b5917_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="safaseasonconfig",
            index=models.Index(
                fields=["is_active"], name="membership__is_acti_48e5fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="safafeestructure",
            index=models.Index(
                fields=["season_config", "entity_type"],
                name="membership__season__1a7a2a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="safafeestructure",
            index=models.Index(
                fields=["is_organization"], name="membership__is_orga_a5e50a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="safafeestructure",
            unique_together={("season_config", "entity_type")},
        ),
        migrations.AddIndex(
            model_name="organizationseasonregistration",
            index=models.Index(
                fields=["season_config", "status"],
                name="membership__season__81533d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="organizationseasonregistration",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="membership__content_55deb3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="organizationseasonregistration",
            unique_together={("season_config", "content_type", "object_id")},
        ),
        migrations.AddIndex(
            model_name="memberseasonhistory",
            index=models.Index(
                fields=["member", "season_config"],
                name="membership__member__02e186_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="memberseasonhistory",
            index=models.Index(
                fields=["season_config", "status"],
                name="membership__season__6a5708_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="memberseasonhistory",
            index=models.Index(
                fields=["club", "season_config"], name="membership__club_id_2bfc86_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="memberseasonhistory",
            unique_together={("member", "season_config")},
        ),
        migrations.AddIndex(
            model_name="memberdocument",
            index=models.Index(
                fields=["member", "document_type"],
                name="membership__member__13fda9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="memberdocument",
            index=models.Index(
                fields=["verification_status"], name="membership__verific_47c2da_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="memberdocument",
            unique_together={("member", "document_type")},
        ),
        migrations.AddIndex(
            model_name="member",
            index=models.Index(
                fields=["safa_id"], name="membership__safa_id_63c8c0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="member",
            index=models.Index(fields=["email"], name="membership__email_f208cc_idx"),
        ),
        migrations.AddIndex(
            model_name="member",
            index=models.Index(
                fields=["current_club", "status"], name="membership__current_7125a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="member",
            index=models.Index(
                fields=["current_season", "status"],
                name="membership__current_9fdb3e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="member",
            index=models.Index(
                fields=["role", "status"], name="membership__role_8ff6ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="invoiceitem",
            index=models.Index(
                fields=["invoice"], name="membership__invoice_0724f8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["invoice_number"], name="membership__invoice_8bc9e2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["season_config", "status"],
                name="membership__season__03715f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["member", "status"], name="membership__member__830727_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["invoice_type", "status"], name="membership__invoice_0021d9_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="clubmemberquota",
            unique_together={("club", "season_config")},
        ),
    ]
